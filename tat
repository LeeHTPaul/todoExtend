warning: LF will be replaced by CRLF in app.json.
The file will have its original line endings in your working directory
[1mdiff --git a/app.json b/app.json[m
[1mindex ec70265..456d814 100644[m
[1m--- a/app.json[m
[1m+++ b/app.json[m
[36m@@ -27,6 +27,7 @@[m
     },[m
     "web": {[m
       "favicon": "./assets/favicon.png"[m
[31m-    }[m
[32m+[m[32m    },[m
[32m+[m[32m    "description": ""[m
   }[m
 }[m
[1mdiff --git a/screens/AddScreen.js b/screens/AddScreen.js[m
[1mindex e593009..e028be5 100644[m
[1m--- a/screens/AddScreen.js[m
[1m+++ b/screens/AddScreen.js[m
[36m@@ -10,6 +10,7 @@[m [mimport {[m
 export default function AddScreen({ navigation }) {[m
   const [text, setText] = useState("");[m
 console.log("add screen");[m
[32m+[m[32m  let textE = "Add";[m
   return ([m
     <View style={[styles.container, { backgroundColor: "white" }]}>[m
       <Text style={{ fontSize: 24 }}>Add your todo here</Text>[m
[36m@@ -21,7 +22,7 @@[m [mconsole.log("add screen");[m
       <View style={styles.buttonContainer}>[m
         <TouchableOpacity[m
           style={styles.button}[m
[31m-          onPress={() => navigation.navigate("Notes", { text })}[m
[32m+[m[32m          onPress={() => navigation.navigate("Notes", { text, textE })}[m
         >[m
           <Text style={styles.buttonText}>Save</Text>[m
         </TouchableOpacity>[m
[1mdiff --git a/screens/NotesScreen.js b/screens/NotesScreen.js[m
[1mindex f56b45f..0daf0a2 100644[m
[1m--- a/screens/NotesScreen.js[m
[1m+++ b/screens/NotesScreen.js[m
[36m@@ -9,7 +9,7 @@[m [mimport {[m
 import { Ionicons } from "@expo/vector-icons";[m
 import firebase from "../database/firebaseDB";[m
 [m
[31m-const db = firebase.firestore().collection("todos");[m
[32m+[m[32mconst db = firebase.firestore().collection("todoProd");[m
 export default function NotesScreen({ navigation, route }) {[m
   const [notes, setNotes] = useState([]);[m
 [m
[36m@@ -17,21 +17,22 @@[m [mexport default function NotesScreen({ navigation, route }) {[m
   // the snapshot keeps everything synched - no need to refresh it later [m
   // onSnapshot() is a listener[m
 [m
[31m- // above[m
 useEffect(() => {[m
[31m-  const unsubscribe = db.orderBy("created").onSnapshot((collection) => {[m
[32m+[m[32m  const unsubscribe = db.orderBy("created","desc").onSnapshot((collection) => {[m
     const updatedNotes = collection.docs.map((doc) => {[m
     // create our own object that pulls the id into a property[m
     const noteObject = {[m
       ...doc.data(),[m
       id: doc.id,[m
     };[m
[31m-    console.log(noteObject);[m
[32m+[m[32m    //console.log("noteobject", noteObject); loop thru the collection[m
     return noteObject;[m
   });[m
[32m+[m[32m  //console.log("setNotes");[m
   setNotes(updatedNotes);[m
[31m-});[m
[31m-return unsubscribe; //return the cleanup function[m
[32m+[m[32m  });[m
[32m+[m[32m//console.log("return unsubscribe"); // run after thread close[m
[32m+[m[32m  return unsubscribe; //return the cleanup function[m
 }, []);[m
 //*/[m
 /*[m
[36m@@ -74,18 +75,35 @@[m [mreturn unsubscribe; //return the cleanup function[m
         created: firebase.firestore.FieldValue.serverTimestamp(),[m
         //id: notes.length.toString(), -- no more id line[m
       };[m
[31m-      db.add(newNote);[m
[32m+[m[32m      // different text and existing text - to consider to add[m
[32m+[m[32m      // if textE Add - meaning new todo - to add if not dont add[m
[32m+[m
[32m+[m[32m      //replace by textE=== Add below start[m
[32m+[m[32m      //if (route.params.text !== route.params.textE) {[m
[32m+[m[32m      //   route.params?.textE ? console.log("do nothing") : db.add(newNote);[m
[32m+[m[32m      //   console.log("inside.. ", route.params.textE);[m
[32m+[m[32m      //} else console.log("outside");[m
[32m+[m[32m      // replace by textE === Add .... end[m[41m [m
[32m+[m[32m      if (route.params.textE === "Add") db.add(newNote);[m
[32m+[m[32m      //if (addInd) {[m
[32m+[m[32m      //    db.add(newNote);[m
[32m+[m[32m      //    addInd = false;[m[41m [m
[32m+[m[32m      //}[m
[32m+[m[32m      //db.add(newNote);[m
       //firebase.firestore().collection("todos").add(newNote);[m
       // setNotes([...notes, newNote]); this line can be deleted[m
     }[m
   }, [route.params?.text]);[m
 [m
[31m-  // update delete text below[m
[31m-  console.log("update (add then delete) check...", route)[m
[32m+[m[32m  // update only ..  text below ?id meaning any change in id[m
[32m+[m[32m  //console.log("update check. route==", route)[m
   useEffect(() => {[m
     if (route.params?.id) {[m
[31m-      console.log("From Update -deleting.. ", route.params.id);[m
[31m-      db.doc(route.params.id).delete();[m
[32m+[m[32m      if (route.params.text !== route.params.textE) {[m
[32m+[m[32m        console.log("From Update -updating. ", route.params.id);[m
[32m+[m[32m      //db.doc(route.params.id).delete();[m
[32m+[m[32m        db.doc(route.params.id).update({title : route.params.text});[m
[32m+[m[32m      }[m
     }[m
   }, [route.params?.id]);[m
   // update text end[m
[36m@@ -95,7 +113,7 @@[m [mreturn unsubscribe; //return the cleanup function[m
   }[m
 [m
   function doneNote(id){[m
[31m-    db.doc(id).update({done : 1});[m
[32m+[m[32m    db.doc(id).update({done : true});[m
   }[m
   // This deletes an individual note[m
   function deleteNote(id) {[m
[1mdiff --git a/screens/UpdateScreen.js b/screens/UpdateScreen.js[m
[1mindex c02c8ed..14b2c41 100644[m
[1m--- a/screens/UpdateScreen.js[m
[1m+++ b/screens/UpdateScreen.js[m
[36m@@ -7,23 +7,26 @@[m [mimport {[m
   TextInput,[m
 } from "react-native";[m
 [m
[32m+[m
 export default function UpdateScreen({ navigation, route }) {[m
     const [text, setText] =  useState(route.params.item.title);[m
[31m-    //text = setText(route.params.title);[m
[32m+[m[32m    let textE = route.params.item.title;[m
     const id = route.params.item.id;[m
[31m-    console.log("add screen");[m
[32m+[m[32m    console.log("update screen", textE);[m
   return ([m
     <View style={[styles.container, { backgroundColor: "white" }]}>[m
       <Text style={{ fontSize: 24 }}>Update your todo here</Text>[m
       <TextInput[m
         style={styles.textInput}[m
         value={text}[m
[31m-        onChangeText={(input) => setText(input)}[m
[32m+[m[32m        onChangeText={(input) => setText(input)}[m[41m [m
       />[m
       <View style={styles.buttonContainer}>[m
         <TouchableOpacity[m
           style={styles.button}[m
[31m-          onPress={() => navigation.navigate("Notes", { text, id })}[m
[32m+[m[32m          onPress={() =>[m[41m [m
[32m+[m[32m            navigation.navigate("Notes", { text, id, textE })[m
[32m+[m[32m            }[m
         >[m
           <Text style={styles.buttonText}>Save</Text>[m
         </TouchableOpacity>[m
